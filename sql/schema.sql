
-- This schema is auto-created by db.py, but documented here for reference

CREATE TABLE IF NOT EXISTS job_postings (
    -- Primary key
    job_id VARCHAR PRIMARY KEY,
    
    -- Core job information
    title VARCHAR,
    company VARCHAR,
    job_url VARCHAR,
    easy_apply BOOLEAN DEFAULT false,
    
    -- Location details
    location_raw VARCHAR,
    location_city VARCHAR,
    location_state VARCHAR,
    location_country VARCHAR,
    location_type VARCHAR,  -- Remote, Hybrid, On-site
    
    -- Company information
    company_size VARCHAR,
    industry VARCHAR,
    company_description TEXT,
    company_logo_url VARCHAR,
    company_linkedin_url VARCHAR,
    company_location VARCHAR,
    
    -- Application details
    is_viewed BOOLEAN DEFAULT false,
    is_applied BOOLEAN DEFAULT false,
    applicant_count VARCHAR,
    status_message VARCHAR,
    promoted_by_hirer BOOLEAN DEFAULT false,
    
    -- Job requirements
    experience_level VARCHAR,
    seniority_level VARCHAR,
    education_requirements TEXT,
    required_skills TEXT,  -- JSON array
    years_experience_required VARCHAR,
    
    -- Job details
    job_function VARCHAR,
    employment_type VARCHAR,
    remote_work_policy VARCHAR,
    application_deadline VARCHAR,
    external_apply_url VARCHAR,
    
    -- Compensation
    salary_range VARCHAR,
    benefits TEXT,  -- JSON array
    compensation_raw VARCHAR,
    
    -- Engagement metrics
    views_count VARCHAR,
    is_saved BOOLEAN DEFAULT false,
    urgently_hiring BOOLEAN DEFAULT false,
    fair_chance_employer BOOLEAN DEFAULT false,
    job_reposted BOOLEAN DEFAULT false,
    
    -- Metadata
    date_posted VARCHAR,
    job_type VARCHAR,
    verified_company BOOLEAN DEFAULT false,
    job_description TEXT,
    
    -- Form data
    form_snapshot_url VARCHAR,
    form_elements TEXT,  -- JSON
    questions_json TEXT,  -- JSON
    answer_template TEXT,  -- JSON
    
    -- AI-generated answers (key field for form automation)
    answers_json TEXT,  -- JSON - generated by OpenAI
    enriched_dataset TEXT,  -- Alias for answers_json
    
    -- OpenAI enrichment fields
    ai_confidence_score DOUBLE,  -- 0.0-1.0 confidence from OpenAI
    ai_needs_review BOOLEAN DEFAULT false,
    ai_enriched_at TIMESTAMP,
    
    -- Processing flags
    processed BOOLEAN DEFAULT false,
    good_fit BOOLEAN,
    fit_score DOUBLE,
    priority INTEGER,
    
    -- Work item tracking
    work_item_id VARCHAR,
    run_id VARCHAR,  -- Latest run that updated this job
    first_run_id VARCHAR,  -- Original run that discovered this job
    
    -- Raw data
    raw_html TEXT,
    playwright_ref VARCHAR,
    
    -- Timestamps
    scraped_at TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create indexes for common queries
CREATE INDEX IF NOT EXISTS idx_job_postings_run_id ON job_postings(run_id);
CREATE INDEX IF NOT EXISTS idx_job_postings_easy_apply ON job_postings(easy_apply);
CREATE INDEX IF NOT EXISTS idx_job_postings_company ON job_postings(company);
CREATE INDEX IF NOT EXISTS idx_job_postings_processed ON job_postings(processed);
CREATE INDEX IF NOT EXISTS idx_job_postings_location_type ON job_postings(location_type);
CREATE INDEX IF NOT EXISTS idx_job_postings_ai_confidence ON job_postings(ai_confidence_score);
CREATE INDEX IF NOT EXISTS idx_job_postings_good_fit ON job_postings(good_fit);
CREATE INDEX IF NOT EXISTS idx_job_postings_fit_score ON job_postings(fit_score);

-- Example queries:

-- Get high-quality remote jobs
-- SELECT * FROM job_postings 
-- WHERE location_type = 'Remote' 
--   AND ai_confidence_score > 0.8 
--   AND easy_apply = true;

-- Get jobs ready for application (with AI answers)
-- SELECT job_id, title, company, job_url 
-- FROM job_postings 
-- WHERE answers_json IS NOT NULL 
--   AND answers_json != '';

-- Get jobs needing manual review
-- SELECT * FROM job_postings 
-- WHERE ai_needs_review = true;


-- ============================================================================
-- User Profiles Table
-- ============================================================================
-- Stores user profile data for Easy Apply automation with full history tracking

CREATE TABLE IF NOT EXISTS user_profiles (
    -- Primary key
    profile_id VARCHAR PRIMARY KEY,
    
    -- Profile metadata
    profile_name VARCHAR,  -- "DevOps", "SRE", "Software Engineer"
    profile_type VARCHAR DEFAULT 'default',  -- "default", "specialized"
    is_active BOOLEAN DEFAULT false,  -- Only one active at a time
    
    -- Contact info (expanded)
    full_name VARCHAR,
    first_name VARCHAR,
    last_name VARCHAR,
    email VARCHAR,
    phone VARCHAR,
    phone_country VARCHAR DEFAULT 'US',
    
    -- Address (for applications requiring location)
    address_street VARCHAR,
    address_city VARCHAR,
    address_state VARCHAR,
    address_zip VARCHAR,
    address_country VARCHAR DEFAULT 'United States',
    
    -- Links
    linkedin_url VARCHAR,
    github VARCHAR,
    website VARCHAR,
    portfolio_url VARCHAR,
    
    -- Professional info
    location VARCHAR,  -- Current location (general, like "San Francisco, CA")
    title VARCHAR,
    summary TEXT,
    
    -- Work Authorization & Legal
    work_authorization VARCHAR,  -- "US Citizen", "Green Card", "H1B", "Requires Sponsorship"
    requires_visa_sponsorship BOOLEAN DEFAULT false,
    security_clearance VARCHAR,  -- "None", "Secret", "Top Secret", etc.
    veteran_status VARCHAR,  -- For EEO forms
    disability_status VARCHAR,  -- For EEO forms
    gender VARCHAR,  -- For EEO forms (optional)
    race_ethnicity VARCHAR,  -- For EEO forms (optional)
    
    -- Preferences
    salary_min INTEGER,
    salary_max INTEGER,
    salary_currency VARCHAR DEFAULT 'USD',
    earliest_start_date VARCHAR,  -- "Immediately", "2 weeks", "1 month", etc.
    willing_to_relocate BOOLEAN DEFAULT false,
    remote_preference VARCHAR,  -- "Remote Only", "Hybrid OK", "Open to Office"
    
    -- Experience
    years_of_experience INTEGER,
    
    -- Skills (stored as JSON array)
    skills TEXT,  -- JSON: ["Python", "Kubernetes", ...]
    
    -- Custom Q&A (for common questions not in profile)
    custom_answers TEXT,  -- JSON: {"Why this company?": "...", "Greatest weakness": "..."}
    
    -- Source tracking
    source_file VARCHAR,  -- Original resume filename
    source_type VARCHAR,  -- "resume_parser", "manual", "api"
    
    -- Versioning
    version INTEGER DEFAULT 1,
    parent_profile_id VARCHAR,  -- For tracking edits
    
    -- Usage tracking
    applications_count INTEGER DEFAULT 0,
    success_rate DOUBLE,
    last_used_at TIMESTAMP,
    
    -- Timestamps
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Indexes for user_profiles
CREATE INDEX IF NOT EXISTS idx_profiles_active ON user_profiles(is_active);
CREATE INDEX IF NOT EXISTS idx_profiles_created ON user_profiles(created_at);

-- Example queries for user_profiles:

-- Get active profile
-- SELECT * FROM user_profiles WHERE is_active = true;

-- Get profile history
-- SELECT profile_id, profile_name, created_at, applications_count, success_rate
-- FROM user_profiles
-- ORDER BY created_at DESC;

-- Get profiles by success rate
-- SELECT profile_name, success_rate, applications_count
-- FROM user_profiles
-- WHERE applications_count > 5
-- ORDER BY success_rate DESC;
